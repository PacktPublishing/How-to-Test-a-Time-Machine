/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package chapter2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CalculatorTest {

    /**
     * Tests adding two positive numbers
     */
    @Test
    public void TestAdd() {
        Calculator calculator = new Calculator();
        assertEquals(7, calculator.add(3,4));
    }

    /**
    *Tests adding a negative number and a positive one
    **/
    @Test
    public void TestAddNegative() {
        Calculator calculator = new Calculator();
        assertEquals(1, calculator.add(-3,4));
    }

    /**
    *Tests adding two numbers that overflow an integer.
    **/
    @Test
    public void TestAddOverflow() {
        Calculator calculator = new Calculator();
        assertThrows(IndexOutOfBoundsException.class, () -> { calculator.add(2147483647,4);});
    }

    /**
    *Tests adding a number that would just be the top to fit an integer number (this is, the case just before the overflow).
    **/
    @Test
    public void TestAddMax() {
        Calculator calculator = new Calculator();
        assertEquals(calculator.add(0, 2147483647), 2147483647);
    } 
    // this could also be 1 + 2147483646 and keep 0 test separated
    
    /**
    *Tests adding the minimum number that could fit in an integer
    **/
    @Test
    public void TestAddMin() {
        Calculator calculator = new Calculator();
        assertEquals(calculator.add(0, -2147483648), -2147483648);
    }

    /**
    * Tests adding a negative number that would overflow an integer
    **/
    @Test
    public void TestAddOverflowMin() {
        Calculator calculator = new Calculator();
        assertThrows(IndexOutOfBoundsException.class, () -> { calculator.add(-2147483648,-4);});
    }

    /**
    *Tests adding two 0
    **/
    @Test
    public void TestAddZero() {
        Calculator calculator = new Calculator();
        assertEquals(0, calculator.add(0, 0));
    }
    
}
